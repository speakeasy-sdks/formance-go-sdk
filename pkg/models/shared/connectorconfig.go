// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ConnectorConfigType string

const (
	ConnectorConfigTypeStripeConfig        ConnectorConfigType = "StripeConfig"
	ConnectorConfigTypeDummyPayConfig      ConnectorConfigType = "DummyPayConfig"
	ConnectorConfigTypeWiseConfig          ConnectorConfigType = "WiseConfig"
	ConnectorConfigTypeModulrConfig        ConnectorConfigType = "ModulrConfig"
	ConnectorConfigTypeCurrencyCloudConfig ConnectorConfigType = "CurrencyCloudConfig"
	ConnectorConfigTypeBankingCircleConfig ConnectorConfigType = "BankingCircleConfig"
)

type ConnectorConfig struct {
	StripeConfig        *StripeConfig
	DummyPayConfig      *DummyPayConfig
	WiseConfig          *WiseConfig
	ModulrConfig        *ModulrConfig
	CurrencyCloudConfig *CurrencyCloudConfig
	BankingCircleConfig *BankingCircleConfig

	Type ConnectorConfigType
}

func CreateConnectorConfigStripeConfig(stripeConfig StripeConfig) ConnectorConfig {
	typ := ConnectorConfigTypeStripeConfig

	return ConnectorConfig{
		StripeConfig: &stripeConfig,
		Type:         typ,
	}
}

func CreateConnectorConfigDummyPayConfig(dummyPayConfig DummyPayConfig) ConnectorConfig {
	typ := ConnectorConfigTypeDummyPayConfig

	return ConnectorConfig{
		DummyPayConfig: &dummyPayConfig,
		Type:           typ,
	}
}

func CreateConnectorConfigWiseConfig(wiseConfig WiseConfig) ConnectorConfig {
	typ := ConnectorConfigTypeWiseConfig

	return ConnectorConfig{
		WiseConfig: &wiseConfig,
		Type:       typ,
	}
}

func CreateConnectorConfigModulrConfig(modulrConfig ModulrConfig) ConnectorConfig {
	typ := ConnectorConfigTypeModulrConfig

	return ConnectorConfig{
		ModulrConfig: &modulrConfig,
		Type:         typ,
	}
}

func CreateConnectorConfigCurrencyCloudConfig(currencyCloudConfig CurrencyCloudConfig) ConnectorConfig {
	typ := ConnectorConfigTypeCurrencyCloudConfig

	return ConnectorConfig{
		CurrencyCloudConfig: &currencyCloudConfig,
		Type:                typ,
	}
}

func CreateConnectorConfigBankingCircleConfig(bankingCircleConfig BankingCircleConfig) ConnectorConfig {
	typ := ConnectorConfigTypeBankingCircleConfig

	return ConnectorConfig{
		BankingCircleConfig: &bankingCircleConfig,
		Type:                typ,
	}
}

func (u *ConnectorConfig) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	wiseConfig := new(WiseConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&wiseConfig); err == nil {
		u.WiseConfig = wiseConfig
		u.Type = ConnectorConfigTypeWiseConfig
		return nil
	}

	stripeConfig := new(StripeConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&stripeConfig); err == nil {
		u.StripeConfig = stripeConfig
		u.Type = ConnectorConfigTypeStripeConfig
		return nil
	}

	dummyPayConfig := new(DummyPayConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dummyPayConfig); err == nil {
		u.DummyPayConfig = dummyPayConfig
		u.Type = ConnectorConfigTypeDummyPayConfig
		return nil
	}

	modulrConfig := new(ModulrConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&modulrConfig); err == nil {
		u.ModulrConfig = modulrConfig
		u.Type = ConnectorConfigTypeModulrConfig
		return nil
	}

	currencyCloudConfig := new(CurrencyCloudConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&currencyCloudConfig); err == nil {
		u.CurrencyCloudConfig = currencyCloudConfig
		u.Type = ConnectorConfigTypeCurrencyCloudConfig
		return nil
	}

	bankingCircleConfig := new(BankingCircleConfig)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&bankingCircleConfig); err == nil {
		u.BankingCircleConfig = bankingCircleConfig
		u.Type = ConnectorConfigTypeBankingCircleConfig
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConnectorConfig) MarshalJSON() ([]byte, error) {
	if u.WiseConfig != nil {
		return json.Marshal(u.WiseConfig)
	}

	if u.StripeConfig != nil {
		return json.Marshal(u.StripeConfig)
	}

	if u.DummyPayConfig != nil {
		return json.Marshal(u.DummyPayConfig)
	}

	if u.ModulrConfig != nil {
		return json.Marshal(u.ModulrConfig)
	}

	if u.CurrencyCloudConfig != nil {
		return json.Marshal(u.CurrencyCloudConfig)
	}

	if u.BankingCircleConfig != nil {
		return json.Marshal(u.BankingCircleConfig)
	}

	return nil, nil
}
