// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/formance-go-sdk/pkg/utils"
	"time"
)

type Raw struct {
}

type Scheme string

const (
	SchemeVisa       Scheme = "visa"
	SchemeMastercard Scheme = "mastercard"
	SchemeAmex       Scheme = "amex"
	SchemeDiners     Scheme = "diners"
	SchemeDiscover   Scheme = "discover"
	SchemeJcb        Scheme = "jcb"
	SchemeUnionpay   Scheme = "unionpay"
	SchemeSepaDebit  Scheme = "sepa debit"
	SchemeSepaCredit Scheme = "sepa credit"
	SchemeSepa       Scheme = "sepa"
	SchemeApplePay   Scheme = "apple pay"
	SchemeGooglePay  Scheme = "google pay"
	SchemeA2a        Scheme = "a2a"
	SchemeAchDebit   Scheme = "ach debit"
	SchemeAch        Scheme = "ach"
	SchemeRtp        Scheme = "rtp"
	SchemeUnknown    Scheme = "unknown"
	SchemeOther      Scheme = "other"
)

func (e Scheme) ToPointer() *Scheme {
	return &e
}

func (e *Scheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "visa":
		fallthrough
	case "mastercard":
		fallthrough
	case "amex":
		fallthrough
	case "diners":
		fallthrough
	case "discover":
		fallthrough
	case "jcb":
		fallthrough
	case "unionpay":
		fallthrough
	case "sepa debit":
		fallthrough
	case "sepa credit":
		fallthrough
	case "sepa":
		fallthrough
	case "apple pay":
		fallthrough
	case "google pay":
		fallthrough
	case "a2a":
		fallthrough
	case "ach debit":
		fallthrough
	case "ach":
		fallthrough
	case "rtp":
		fallthrough
	case "unknown":
		fallthrough
	case "other":
		*e = Scheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scheme: %v", v)
	}
}

type PaymentType string

const (
	PaymentTypePayIn    PaymentType = "PAY-IN"
	PaymentTypePayout   PaymentType = "PAYOUT"
	PaymentTypeTransfer PaymentType = "TRANSFER"
	PaymentTypeOther    PaymentType = "OTHER"
)

func (e PaymentType) ToPointer() *PaymentType {
	return &e
}

func (e *PaymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAY-IN":
		fallthrough
	case "PAYOUT":
		fallthrough
	case "TRANSFER":
		fallthrough
	case "OTHER":
		*e = PaymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentType: %v", v)
	}
}

type Payment struct {
	AccountID     string              `json:"accountID"`
	Adjustments   []PaymentAdjustment `json:"adjustments"`
	Asset         string              `json:"asset"`
	CreatedAt     time.Time           `json:"createdAt"`
	ID            string              `json:"id"`
	InitialAmount int64               `json:"initialAmount"`
	Metadata      []PaymentMetadata   `json:"metadata"`
	Provider      Connector           `json:"provider"`
	Raw           Raw                 `json:"raw"`
	Reference     string              `json:"reference"`
	Scheme        Scheme              `json:"scheme"`
	Status        PaymentStatus       `json:"status"`
	Type          PaymentType         `json:"type"`
}

func (p Payment) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Payment) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Payment) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *Payment) GetAdjustments() []PaymentAdjustment {
	if o == nil {
		return []PaymentAdjustment{}
	}
	return o.Adjustments
}

func (o *Payment) GetAsset() string {
	if o == nil {
		return ""
	}
	return o.Asset
}

func (o *Payment) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Payment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payment) GetInitialAmount() int64 {
	if o == nil {
		return 0
	}
	return o.InitialAmount
}

func (o *Payment) GetMetadata() []PaymentMetadata {
	if o == nil {
		return []PaymentMetadata{}
	}
	return o.Metadata
}

func (o *Payment) GetProvider() Connector {
	if o == nil {
		return Connector("")
	}
	return o.Provider
}

func (o *Payment) GetRaw() Raw {
	if o == nil {
		return Raw{}
	}
	return o.Raw
}

func (o *Payment) GetReference() string {
	if o == nil {
		return ""
	}
	return o.Reference
}

func (o *Payment) GetScheme() Scheme {
	if o == nil {
		return Scheme("")
	}
	return o.Scheme
}

func (o *Payment) GetStatus() PaymentStatus {
	if o == nil {
		return PaymentStatus("")
	}
	return o.Status
}

func (o *Payment) GetType() PaymentType {
	if o == nil {
		return PaymentType("")
	}
	return o.Type
}
