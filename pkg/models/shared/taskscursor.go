// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/formance-go-sdk/pkg/utils"
)

type TasksCursorCursorDataType string

const (
	TasksCursorCursorDataTypeTaskStripe        TasksCursorCursorDataType = "TaskStripe"
	TasksCursorCursorDataTypeTaskWise          TasksCursorCursorDataType = "TaskWise"
	TasksCursorCursorDataTypeTaskCurrencyCloud TasksCursorCursorDataType = "TaskCurrencyCloud"
	TasksCursorCursorDataTypeTaskDummyPay      TasksCursorCursorDataType = "TaskDummyPay"
	TasksCursorCursorDataTypeTaskModulr        TasksCursorCursorDataType = "TaskModulr"
	TasksCursorCursorDataTypeTaskBankingCircle TasksCursorCursorDataType = "TaskBankingCircle"
)

type TasksCursorCursorData struct {
	TaskStripe        *TaskStripe
	TaskWise          *TaskWise
	TaskCurrencyCloud *TaskCurrencyCloud
	TaskDummyPay      *TaskDummyPay
	TaskModulr        *TaskModulr
	TaskBankingCircle *TaskBankingCircle

	Type TasksCursorCursorDataType
}

func CreateTasksCursorCursorDataTaskStripe(taskStripe TaskStripe) TasksCursorCursorData {
	typ := TasksCursorCursorDataTypeTaskStripe

	return TasksCursorCursorData{
		TaskStripe: &taskStripe,
		Type:       typ,
	}
}

func CreateTasksCursorCursorDataTaskWise(taskWise TaskWise) TasksCursorCursorData {
	typ := TasksCursorCursorDataTypeTaskWise

	return TasksCursorCursorData{
		TaskWise: &taskWise,
		Type:     typ,
	}
}

func CreateTasksCursorCursorDataTaskCurrencyCloud(taskCurrencyCloud TaskCurrencyCloud) TasksCursorCursorData {
	typ := TasksCursorCursorDataTypeTaskCurrencyCloud

	return TasksCursorCursorData{
		TaskCurrencyCloud: &taskCurrencyCloud,
		Type:              typ,
	}
}

func CreateTasksCursorCursorDataTaskDummyPay(taskDummyPay TaskDummyPay) TasksCursorCursorData {
	typ := TasksCursorCursorDataTypeTaskDummyPay

	return TasksCursorCursorData{
		TaskDummyPay: &taskDummyPay,
		Type:         typ,
	}
}

func CreateTasksCursorCursorDataTaskModulr(taskModulr TaskModulr) TasksCursorCursorData {
	typ := TasksCursorCursorDataTypeTaskModulr

	return TasksCursorCursorData{
		TaskModulr: &taskModulr,
		Type:       typ,
	}
}

func CreateTasksCursorCursorDataTaskBankingCircle(taskBankingCircle TaskBankingCircle) TasksCursorCursorData {
	typ := TasksCursorCursorDataTypeTaskBankingCircle

	return TasksCursorCursorData{
		TaskBankingCircle: &taskBankingCircle,
		Type:              typ,
	}
}

func (u *TasksCursorCursorData) UnmarshalJSON(data []byte) error {

	taskStripe := TaskStripe{}
	if err := utils.UnmarshalJSON(data, &taskStripe, "", true, true); err == nil {
		u.TaskStripe = &taskStripe
		u.Type = TasksCursorCursorDataTypeTaskStripe
		return nil
	}

	taskWise := TaskWise{}
	if err := utils.UnmarshalJSON(data, &taskWise, "", true, true); err == nil {
		u.TaskWise = &taskWise
		u.Type = TasksCursorCursorDataTypeTaskWise
		return nil
	}

	taskCurrencyCloud := TaskCurrencyCloud{}
	if err := utils.UnmarshalJSON(data, &taskCurrencyCloud, "", true, true); err == nil {
		u.TaskCurrencyCloud = &taskCurrencyCloud
		u.Type = TasksCursorCursorDataTypeTaskCurrencyCloud
		return nil
	}

	taskDummyPay := TaskDummyPay{}
	if err := utils.UnmarshalJSON(data, &taskDummyPay, "", true, true); err == nil {
		u.TaskDummyPay = &taskDummyPay
		u.Type = TasksCursorCursorDataTypeTaskDummyPay
		return nil
	}

	taskModulr := TaskModulr{}
	if err := utils.UnmarshalJSON(data, &taskModulr, "", true, true); err == nil {
		u.TaskModulr = &taskModulr
		u.Type = TasksCursorCursorDataTypeTaskModulr
		return nil
	}

	taskBankingCircle := TaskBankingCircle{}
	if err := utils.UnmarshalJSON(data, &taskBankingCircle, "", true, true); err == nil {
		u.TaskBankingCircle = &taskBankingCircle
		u.Type = TasksCursorCursorDataTypeTaskBankingCircle
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TasksCursorCursorData) MarshalJSON() ([]byte, error) {
	if u.TaskStripe != nil {
		return utils.MarshalJSON(u.TaskStripe, "", true)
	}

	if u.TaskWise != nil {
		return utils.MarshalJSON(u.TaskWise, "", true)
	}

	if u.TaskCurrencyCloud != nil {
		return utils.MarshalJSON(u.TaskCurrencyCloud, "", true)
	}

	if u.TaskDummyPay != nil {
		return utils.MarshalJSON(u.TaskDummyPay, "", true)
	}

	if u.TaskModulr != nil {
		return utils.MarshalJSON(u.TaskModulr, "", true)
	}

	if u.TaskBankingCircle != nil {
		return utils.MarshalJSON(u.TaskBankingCircle, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TasksCursorCursor struct {
	Data     []TasksCursorCursorData `json:"data"`
	HasMore  bool                    `json:"hasMore"`
	Next     *string                 `json:"next,omitempty"`
	PageSize int64                   `json:"pageSize"`
	Previous *string                 `json:"previous,omitempty"`
}

func (o *TasksCursorCursor) GetData() []TasksCursorCursorData {
	if o == nil {
		return []TasksCursorCursorData{}
	}
	return o.Data
}

func (o *TasksCursorCursor) GetHasMore() bool {
	if o == nil {
		return false
	}
	return o.HasMore
}

func (o *TasksCursorCursor) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *TasksCursorCursor) GetPageSize() int64 {
	if o == nil {
		return 0
	}
	return o.PageSize
}

func (o *TasksCursorCursor) GetPrevious() *string {
	if o == nil {
		return nil
	}
	return o.Previous
}

type TasksCursor struct {
	Cursor TasksCursorCursor `json:"cursor"`
}

func (o *TasksCursor) GetCursor() TasksCursorCursor {
	if o == nil {
		return TasksCursorCursor{}
	}
	return o.Cursor
}
